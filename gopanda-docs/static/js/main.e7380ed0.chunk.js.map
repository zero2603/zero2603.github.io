{"version":3,"sources":["components/ToggleDisplay.js","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["ToggleDisplay","state","isShowing","component","this","props","className","name","description","onClick","setState","scope","map","prop","index","key","propName","propType","defaultValue","isRequired","propDescription","onUpdate","onDelete","Component","api","axios","create","baseURL","timeout","headers","dataTypes","App","originalComponents","components","isOpenCreateModal","isOpenUpdateModal","isOpenAlertModal","listPropsForm","newComponent","currentFocusComponent","get","then","res","data","id","length","type","temp","push","onChange","e","onChangePropsData","target","value","required","removeRow","temp1","filter","item","i","preventDefault","put","JSON","stringify","NotificationManager","success","catch","err","error","console","log","response","keyword","toLowerCase","search","updatedComponent","isValid","msg","every","indexOf","undefined","parseInt","toString","placeholder","openModal","open","onClose","closeModal","onSubmit","submit","onChangeData","addRow","width","onUpdateData","updateComponent","removeComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7380ed0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class ToggleDisplay extends Component {\n    state = {\n        isShowing: false\n    }\n\n    render() {\n        var { component } = this.props;\n\n        return (\n            <div>\n                <div className=\"row align-items-center\">\n                    <div className=\"col-md-11\">\n                        <h4>{component.name}</h4>\n                        <small>{component.description}</small>\n                    </div>\n                    <div className=\"col-md-1\" onClick={() => this.setState({ isShowing: !this.state.isShowing })}>\n                        {\n                            this.state.isShowing ? (\n                                <i className=\"fas fa-chevron-up float-right toggle-icon\"></i>\n                            ) : (\n                                <i className=\"fas fa-chevron-right float-right toggle-icon\"></i>\n                            )\n                        }\n                    </div>\n                </div>\n                <div className=\"mt-2\">\n                    {\n                        this.state.isShowing ? (\n                            <div className=\"\">\n                                <h6>Danh sách props</h6>\n                                <table className=\"table table-striped\">\n                                    <thead className=\"thead-dark\">\n                                        <tr>\n                                            <th scope=\"col\">Tên</th>\n                                            <th scope=\"col\">Kiểu dữ liệu</th>\n                                            <th scope=\"col\">Giá trị mặc định</th>\n                                            <th scope=\"col\">Bắt buộc</th>\n                                            <th scope=\"col\">Mô tả</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            component.props.map((prop, index) => {\n                                                return (\n                                                    <tr key={index}>\n                                                        <td>{prop.propName}</td>\n                                                        <td>{prop.propType}</td>\n                                                        <td>{prop.defaultValue}</td>\n                                                        <td>{prop.isRequired}</td>\n                                                        <td>{prop.propDescription}</td>\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                                <div>\n                                    <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => this.props.onUpdate()}>Sửa Component</button>\n                                    <button className=\"btn btn-danger btn-sm\" onClick={() => this.props.onDelete()}>Xoá Component</button>\n                                </div>\n                            </div>\n                        ) : null\n                    }\n                </div>\n                <hr />\n            </div>\n        )\n    }\n}\n","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.myjson.com/bins',\n    // baseURL: 'https://api.thoxaydung.xyz/v1',\n    // baseURL: API_URL,\n    timeout: 10000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;","import React, { Component } from 'react';\nimport data from './data.json';\nimport ToggleDisplay from './components/ToggleDisplay';\nimport Modal from 'react-responsive-modal';\nimport './App.css';\nimport api from './utils/api';\nimport { debounce } from './utils/helper';\nimport { JsonEditor as Editor } from 'jsoneditor-react';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport 'jsoneditor-react/es/editor.min.css';\nimport 'react-notifications/lib/notifications.css';\n\nconst dataTypes = ['array', 'boolean', 'element', 'enum', 'function', 'number', 'node', 'object', 'string'];\n\nexport default class App extends Component {\n    state = {\n        originalComponents: [],\n        components: [],\n        isOpenCreateModal: false,\n        isOpenUpdateModal: false,\n        isOpenAlertModal: false,\n        listPropsForm: [],\n        newComponent: {\n            name: '',\n            description: '',\n            props: []\n        },\n        currentFocusComponent: {}\n    }\n\n    async componentDidMount() {\n        await api.get('/1dyfug').then(res => {\n            this.setState({ \n                originalComponents: res.data, \n                components: res.data,\n                newComponent: {\n                    ...this.state.newComponent,\n                    id: res.data.length\n                }\n            });\n        })\n    }\n\n    closeModal() {\n        this.setState({\n            isOpenCreateModal: false,\n            isOpenUpdateModal: false,\n            isOpenAlertModal: false\n        });\n    }\n\n    openModal(type, component = null) {\n        switch (type) {\n            case 'create': {\n                this.setState({ isOpenCreateModal: true });\n                break;\n            }\n            case 'update': {\n                this.setState({ isOpenUpdateModal: true, currentFocusComponent: component });\n                break;\n            }\n            case 'remove': {\n                this.setState({ isOpenAlertModal: true, currentFocusComponent: component });\n                break;\n            }\n        }\n    }\n\n    addRow() {\n        let temp = this.state.listPropsForm;\n        let index = temp.length + 1; // first row is hard code in render function\n\n        temp.push(<tr key={index} id={`prop_rows_${index}`}>\n            <td> <input name=\"propName\" className=\"form-control form-control-sm\" type=\"text\" onChange={(e) =>\n                this.onChangePropsData(e.target.name, e.target.value, index)} required /> </td>\n            <td><select className=\"form-control form-control-sm\" name=\"propType\" required onChange={(e) =>\n                this.onChangePropsData(e.target.name, e.target.value, index)}>\n                {dataTypes.map((type, index) => { return (<option key={index} value={type}>{type}</option>) })}</select></td>\n            <td> <input name=\"defaultValue\" className=\"form-control form-control-sm\" type=\"text\" onChange={(e) =>\n                this.onChangePropsData(e.target.name, e.target.value, index)} /></td>\n            <td> <select className=\"form-control form-control-sm\" name=\"isRequired\" required onChange={(e) =>\n                this.onChangePropsData(e.target.name, e.target.value, index)}>\n                <option value={1}>Có</option>\n                <option value={0}>Không</option>\n            </select> </td>\n            <td> <textarea name=\"propDescription\"  className=\"form-control form-control-sm\"\n                onChange={(e) => this.onChangePropsData(e.target.name, e.target.value, index)}></textarea></td>\n            <td> <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={() => this.removeRow(index)}>Xoá</button> </td></tr>\n        );\n\n        this.setState({\n            listPropsForm: temp\n        })\n    }\n\n    removeRow(index) {\n        let temp = this.state.listPropsForm;\n        let temp1 = this.state.newComponent.props;\n\n        if (index >= 1) {\n            delete temp[index - 1];\n            temp1 = temp1.filter((item, i) => {\n                return i !== index;\n            })\n\n            this.setState({\n                listPropsForm: temp,\n                newComponent: {\n                    ...this.state.newComponent,\n                    props: temp1\n                }\n            })\n        }\n    }\n\n    async submit(e) {\n        e.preventDefault();\n        let temp = this.state.components;\n        temp.push(this.state.newComponent);\n\n        await api.put('/1dyfug', JSON.stringify(temp)).then(res => {\n            this.setState({\n                originalComponents: temp,\n                components: temp,\n                isOpenCreateModal: false,\n                newComponent: {\n                    ...this.state.newComponent,\n                    id: temp.length\n                }\n            })\n            NotificationManager.success(\"Thêm mới thành công!\");\n        }).catch(err => {\n            NotificationManager.error(\"Đã có lỗi xảy ra\");\n            console.log(err.response);\n        })\n    }\n\n    onChangeData(name, value) {\n        this.setState({\n            newComponent: {\n                ...this.state.newComponent,\n                [name]: value\n            }\n        })\n    }\n\n    onChangePropsData(name, value, index) {\n        var temp = this.state.newComponent.props;\n        if (temp[index]) {\n            temp[index][name] = value;\n        } else {\n            temp.push({\n                propType: 'array',\n                isRequired: '1',\n                [name]: value\n            });\n        }\n\n        this.setState({\n            newComponent: {\n                ...this.state.newComponent,\n                props: temp\n            }\n        });\n    }\n\n    async search(keyword) {\n        let temp = this.state.originalComponents;\n\n        if (keyword) {\n            keyword = keyword.toLowerCase();\n            \n            temp = temp.filter(component => {\n                return component.name.toLowerCase().search(keyword) >= 0;\n            });\n\n            this.setState({ components: temp });\n        } else {\n            this.setState({components: temp})\n        }\n    }\n\n    async removeComponent() {\n        let temp = this.state.originalComponents;\n        let id = this.state.currentFocusComponent.id;\n\n        temp = temp.filter(item => {\n            return item.id != id;\n        });\n\n        await api.put('/1dyfug', JSON.stringify(temp)).then(res => {\n            this.setState({\n                originalComponents: temp,\n                components: temp,\n                isOpenAlertModal: false,\n                currentFocusComponent: {},\n                newComponent: {\n                    ...this.state.newComponent,\n                    id: temp.length\n                }\n            });\n            NotificationManager.success(\"Đã xoá thành công!\");\n        }).catch(err => {\n            NotificationManager.error(\"Đã có lỗi xảy ra\");\n            console.log(err.response);\n        })\n    }\n\n    onUpdateData(updatedComponent) {\n        if(updatedComponent.id != this.state.currentFocusComponent.id) {\n            updatedComponent.id = this.state.currentFocusComponent.id;\n            NotificationManager.error(\"Không thể cập nhật id\");\n        }\n\n        this.setState({\n            currentFocusComponent: updatedComponent\n        })\n    }\n\n    async updateComponent() {\n        let temp = this.state.originalComponents;\n        let component = this.state.currentFocusComponent;\n\n        let isValid = true;\n        let msg = \"\";\n\n        component.props.every(prop => {\n            if(dataTypes.indexOf(prop.propType) < 0) {\n                isValid = false;\n                msg = \"Sai kiểu dữ liệu.\";\n                return false;\n            } \n            return true;\n        });\n        if(component.isRequired != undefined) {\n            if([0, 1].indexOf(parseInt(component.isRequired))) {\n                isValid = false;\n                msg = \"Sai trường Bắt buộc.\";\n            }\n        }\n        \n        if(!component.name || !component.description) {\n            isValid = false;\n            msg = \"Thiếu tên hoặc mô tả component.\";\n        }\n\n        if(isValid) {\n            temp = temp.map(item => {\n                if(item.id.toString() == component.id.toString()) {\n                    return component;\n                } else {\n                    return item;\n                }\n            });\n    \n            await api.put('/1dyfug', JSON.stringify(temp)).then(res => {\n                this.setState({\n                    originalComponents: temp,\n                    components: temp,\n                    isOpenUpdateModal: false,\n                    currentFocusComponent: {}\n                });\n                NotificationManager.success(\"Đã cập nhật thành công!\");\n            }).catch(err => {\n                NotificationManager.error(\"Đã có lỗi xảy ra\");\n                console.log(err.response);\n            })\n        } else {\n            NotificationManager.error(msg);\n        }\n    }\n\n    render() {\n        var { components } = this.state;\n\n\n        return (\n            <div className=\"container mt-4\">\n                <h1><i className=\"fab fa-react\"></i> GoPanda Documentation for Custom Component</h1>\n\n                <div className=\"content\">\n                    <div className=\"clearfix mb-4\">\n                        <div className=\"float-left\">\n                            <input className=\"form-control\" type=\"text\" placeholder=\"Tìm kiếm component...\" onChange={(e) => this.search(e.target.value)} />\n                        </div>\n                        <button className=\"float-right btn btn-dark\" onClick={() => this.openModal('create')}>\n                            Thêm mới Component\n                        </button>\n                    </div>\n                    {\n                        components.map((component, index) => {\n                            return (\n                                <ToggleDisplay \n                                    component={component} \n                                    key={index} \n                                    onUpdate={() => this.openModal('update', component)} \n                                    onDelete={() => this.openModal('remove', component)} \n                                />\n                            )\n                        })\n                    }\n                </div>\n                <Modal open={this.state.isOpenCreateModal} onClose={() => this.closeModal()}>\n                    <h4>Thêm Component</h4>\n                    <hr />\n                    <form onSubmit={(e) => this.submit(e)}>\n                        <div className=\"form-group\">\n                            <label>Tên Component *</label>\n                            <input name=\"name\" className=\"form-control\" type=\"text\" required onChange={(e) => this.onChangeData(e.target.name, e.target.value)} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Mô tả *</label>\n                            <textarea name=\"description\" required className=\"form-control\" onChange={(e) => this.onChangeData(e.target.name, e.target.value)}></textarea>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Props</label>\n                            <button type=\"button\" className=\"btn btn-dark btn-sm float-right\" onClick={() => this.addRow()}>Thêm mới props</button>\n                            <table className=\"table table-stripped mt-3\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Tên</th>\n                                        <th scope=\"col\">Kiểu dữ liệu</th>\n                                        <th scope=\"col\">Giá trị mặc định</th>\n                                        <th scope=\"col\">Bắt buộc</th>\n                                        <th scope=\"col\" width=\"40%\">Mô tả</th>\n                                        <th scope=\"col\">Option</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"props-rows\">\n                                    <tr id='props-0'>\n                                        <td>\n                                            <input name=\"propName\" className=\"form-control form-control-sm\" type=\"text\" required onChange={(e) => this.onChangePropsData(e.target.name, e.target.value, 0)} />\n                                        </td>\n                                        <td>\n                                            <select className=\"form-control form-control-sm\" name=\"propType\" required onChange={(e) => this.onChangePropsData(e.target.name, e.target.value, 0)}>\n                                                {\n                                                    dataTypes.map((type, index) => {\n                                                        return (<option key={index} value={type}>{type}</option>)\n                                                    })\n                                                }\n                                            </select>\n                                        </td>\n                                        <td>\n                                            <input name=\"defaultValue\" className=\"form-control form-control-sm\" type=\"text\" onChange={(e) => this.onChangePropsData(e.target.name, e.target.value, 0)} />\n                                        </td>\n                                        <td>\n                                            <select className=\"form-control form-control-sm\" name=\"isRequired\" required onChange={(e) => this.onChangePropsData(e.target.name, e.target.value, 0)}>\n                                                <option value={1}>Có</option>\n                                                <option value={0}>Không</option>\n                                            </select>\n                                        </td>\n                                        <td>\n                                            <textarea name=\"propDescription\" className=\"form-control form-control-sm\" onChange={(e) => this.onChangePropsData(e.target.name, e.target.value, 0)}></textarea>\n                                        </td>\n                                        <td>\n                                            {/* <button type=\"button\" className=\"btn btn-sm btn-danger\" >Xoá</button> */}\n                                        </td>\n                                    </tr>\n                                    {this.state.listPropsForm.map(item => {\n                                        return item;\n                                    })}\n                                </tbody>\n                            </table>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-sm btn-primary float-right\">Hoàn tất</button>\n                    </form>\n                </Modal>\n                <Modal open={this.state.isOpenUpdateModal} onClose={() => this.closeModal()}>\n                    <Editor\n                        value={this.state.currentFocusComponent}\n                        onChange={(updatedComponent) => this.onUpdateData(updatedComponent)}\n                    />\n                    <div className=\"mt-4\">\n                        <button className=\"btn btn-sm btn-outline-dark mr-2\" onClick={() => this.closeModal()}>Huỷ</button>\n                        <button className=\"btn btn-sm btn-primary\" onClick={() => this.updateComponent()}>Cập nhật</button>\n                    </div>\n                </Modal>\n                <Modal open={this.state.isOpenAlertModal} onClose={() => this.closeModal()}>\n                    <div className=\"text-center\">\n                        Bạn muốn xoá component này?\n                    </div>\n                    <div className=\"text-center mt-4\">\n                        <button className=\"btn btn-sm btn-outline-dark mr-2\" onClick={() => this.closeModal()}>Huỷ</button>\n                        <button className=\"btn btn-sm btn-danger\" onClick={() => this.removeComponent()}>Xoá</button>\n                    </div>\n                </Modal>\n                <NotificationContainer />\n            </div>\n        )\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}